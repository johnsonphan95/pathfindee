{"version":3,"sources":["components/Node.jsx","utils/node.js","utils/algorithms/min_heap.js","utils/algorithms/astar.js","utils/algorithms/dijkstra.js","utils/algorithms/bfs.js","components/PathFinder.jsx","utils/algorithms/dfs.js","App.js","serviceWorker.js","index.js"],"names":["Node","row","col","start","end","wall","weight","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","attributes","id","className","NodeObject","coordinates","this","visited","distance","Infinity","prev","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","seen","MinHeap","array","heap","buildHeap","currentIdx","Math","floor","length","siftDown","endIdx","leftChildIdx","rightChildIdx","idxToSwap","swap","parentIdx","valueToRemove","pop","node","push","siftUp","i","j","temp","getUnvisitedNeighbors","grid","neighbors","filter","neighbor","getCost","startNode","endNode","hypot","abs","Visualizer","useState","setGrid","finished","setFinished","finding","setFinding","mouseDown","setMouseDown","moveStart","setMoveStart","moveEnd","setMoveEnd","weighted","setWeighted","algorithm","setAlgorithm","setCoordinates","useEffect","getInitialGrid","curr","getWalledGrid","newGrid","slice","newNode","getNewNodeGrid","getWeightedGrid","getPaths","visitedNodesInOrder","nodesInShortestPathOrder","visitedNodes","remove","insert","forEach","dijkstra","shortestPath","unshift","dijkstraShortestPath","aStar","aStarShortestPath","dfs","depthFirstSearch","queue","shift","unvisitedNeighbors","breadthFirstSearch","bfsShortestPath","changeAlgorithm","e","preventDefault","target","map","resetGrid","document","getElementsByClassName","getElementById","animateShortestPath","delay","setTimeout","visualizeAlgorithm","paths","animateAlgorithm","defaultValue","onClick","text","func","alert","getMainButton","style","display","background","color","getWeightButton","colIdx","key","handleMouseDown","newCoordinates","Object","assign","handleMouseEnter","handleMouseLeave","App","href","icon","faLinkedin","faGithubSquare","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58a5932c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Node.css\";\n\nconst Node = ({\n  row,\n  col,\n  start,\n  end,\n  wall,\n  weight,\n  onMouseDown,\n  onMouseEnter,\n  onMouseUp,\n  onMouseLeave\n}) => {\n  const attributes = end\n    ? \"node-end\"\n    : start\n    ? \"node-start\"\n    : weight > 0\n    ? \"node-weight\"\n    : wall\n    ? \"node-wall\"\n    : \"\";\n\n  return (\n    <div\n      id={`${row}-${col}`}\n      className={`node ${attributes}`}\n      onMouseDown={() => onMouseDown(col, row)}\n      onMouseEnter={() => onMouseEnter(col, row)}\n      onMouseLeave={() => onMouseLeave(col, row)}\n      onMouseUp={() => onMouseUp()}\n    ></div>\n  );\n};\n\nexport default Node;\n","class NodeObject {\n  constructor(col, row, coordinates) {\n    this.col = col;\n    this.row = row;\n    this.visited = false;\n    this.distance = Infinity;\n    this.prev = null;\n    this.start =\n      this.row === coordinates.START_NODE_ROW &&\n      this.col === coordinates.START_NODE_COL;\n    this.end =\n      this.row === coordinates.END_NODE_ROW &&\n      this.col === coordinates.END_NODE_COL;\n    this.wall = false;\n    this.seen = false;\n    this.weight = 0;\n  }\n}\n\nexport default NodeObject;\n","class MinHeap {\n  constructor(array) {\n    this.heap = this.buildHeap(array);\n  }\n\n  buildHeap(array) {\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n      this.siftDown(currentIdx, array.length - 1, array);\n    }\n    return array;\n  }\n\n  siftDown(currentIdx, endIdx, heap) {\n    let leftChildIdx = currentIdx * 2 + 1;\n    while (leftChildIdx < endIdx) {\n      const rightChildIdx =\n        currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\n      let idxToSwap;\n      if (\n        rightChildIdx !== -1 &&\n        heap[rightChildIdx].distance < heap[leftChildIdx].distance\n      ) {\n        idxToSwap = rightChildIdx;\n      } else {\n        idxToSwap = leftChildIdx;\n      }\n      if (heap[idxToSwap].distance < heap[currentIdx].distance) {\n        this.swap(currentIdx, idxToSwap, heap);\n        currentIdx = idxToSwap;\n        leftChildIdx = currentIdx * 2 + 1;\n      } else {\n        return;\n      }\n    }\n  }\n\n  siftUp(currentIdx, heap) {\n    let parentIdx = Math.floor((currentIdx - 1) / 2);\n    while (\n      currentIdx > 0 &&\n      heap[currentIdx].distance < heap[parentIdx].distance\n    ) {\n      this.swap(currentIdx, parentIdx, heap);\n      currentIdx = parentIdx;\n      parentIdx = Math.floor((currentIdx - 1) / 2);\n    }\n  }\n\n  peek() {\n    return this.heap[0];\n  }\n\n  remove() {\n    this.swap(0, this.heap.length - 1, this.heap);\n    const valueToRemove = this.heap.pop();\n    this.siftDown(0, this.heap.length - 1, this.heap);\n    return valueToRemove;\n  }\n\n  insert(node) {\n    this.heap.push(node);\n    this.siftUp(this.heap.length - 1, this.heap);\n  }\n\n  swap(i, j, heap) {\n    let temp = heap[j];\n    heap[j] = heap[i];\n    heap[i] = temp;\n  }\n}\n\nexport default MinHeap;\n","import MinHeap from \"./min_heap\";\n\nexport const aStar = (grid, startNode, endNode) => {\n  const visitedNodes = [];\n  startNode.distance = 0;\n  const heap = new MinHeap([startNode]);\n  while (heap) {\n    const node = heap.remove();\n    if (!node || node.distance === Infinity) {\n      return visitedNodes;\n    }\n    if (node.weight > 1) {\n      node.weight -= 1;\n      node.distance = getCost(node, startNode, endNode, node.weight);\n      heap.insert(node);\n      continue;\n    }\n    node.visited = true;\n    visitedNodes.push(node);\n    if (node === endNode) return visitedNodes;\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    unvisitedNeighbors.forEach(neighbor => {\n      if (neighbor.seen || neighbor.wall) return;\n      neighbor.seen = true;\n      neighbor.distance = getCost(neighbor, startNode, endNode);\n      neighbor.prev = node;\n      heap.insert(neighbor);\n    });\n  }\n};\n\nconst getUnvisitedNeighbors = (node, grid) => {\n  const neighbors = [];\n  const { row, col } = node;\n  if (row > 0) neighbors.push(grid[col][row - 1]);\n  if (row < grid[0].length - 1) neighbors.push(grid[col][row + 1]);\n  if (col > 0) neighbors.push(grid[col - 1][row]);\n  if (col < grid.length - 1) neighbors.push(grid[col + 1][row]);\n  return neighbors.filter(neighbor => !neighbor.visited && !neighbor.wall);\n};\n\nconst getCost = (node, startNode, endNode, weight = 1) => {\n  return (\n    (weight / 3) *\n      Math.hypot(startNode.row - node.row, startNode.col - node.col) +\n    Math.abs(node.col - endNode.col) +\n    Math.abs(node.row - endNode.row)\n  );\n};\n\nexport const aStarShortestPath = endNode => {\n  const shortestPath = [];\n  let node = endNode;\n  while (node !== null) {\n    shortestPath.unshift(node);\n    node = node.prev;\n  }\n  return shortestPath;\n};\n","import MinHeap from \"./min_heap\";\n\nexport const dijkstra = (grid, startNode, endNode) => {\n  const visitedNodes = [];\n  startNode.distance = 0;\n  const heap = new MinHeap([startNode]);\n  while (heap) {\n    const node = heap.remove();\n    if (!node || node.distance === Infinity) {\n      return visitedNodes;\n    }\n    if (node.weight > 1) {\n      node.weight -= 1;\n      node.distance += 1;\n      heap.insert(node);\n      continue;\n    }\n    node.visited = true;\n    visitedNodes.push(node);\n    if (node === endNode) return visitedNodes;\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    unvisitedNeighbors.forEach(neighbor => {\n      if (neighbor.seen || neighbor.wall) return;\n      neighbor.seen = true;\n      neighbor.distance = node.distance + 1;\n      neighbor.prev = node;\n      heap.insert(neighbor);\n    });\n  }\n  return visitedNodes;\n};\n\nconst getUnvisitedNeighbors = (node, grid) => {\n  const neighbors = [];\n  const { row, col } = node;\n  if (row > 0) neighbors.push(grid[col][row - 1]);\n  if (row < grid[0].length - 1) neighbors.push(grid[col][row + 1]);\n  if (col > 0) neighbors.push(grid[col - 1][row]);\n  if (col < grid.length - 1) neighbors.push(grid[col + 1][row]);\n  return neighbors.filter(neighbor => !neighbor.visited && !neighbor.wall);\n};\n\nexport const dijkstraShortestPath = endNode => {\n  const shortestPath = [];\n  let node = endNode;\n  while (node !== null) {\n    shortestPath.unshift(node);\n    node = node.prev;\n  }\n  return shortestPath;\n};\n","export function breadthFirstSearch(grid, startNode, endNode) {\n  const queue = [startNode];\n  const visitedNodes = [];\n  while (queue.length) {\n    const node = queue.shift();\n    if (node.visited || node.wall) {\n      continue;\n    }\n    node.visited = true;\n    visitedNodes.push(node);\n    if (node === endNode) return visitedNodes;\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      queue.push(neighbor);\n      neighbor.prev = node;\n    }\n  }\n  return visitedNodes;\n}\n\nconst getUnvisitedNeighbors = (node, grid) => {\n  const neighbors = [];\n  const { row, col } = node;\n  if (row > 0) neighbors.push(grid[col][row - 1]);\n  if (row < grid[0].length - 1) neighbors.push(grid[col][row + 1]);\n  if (col > 0) neighbors.push(grid[col - 1][row]);\n  if (col < grid.length - 1) neighbors.push(grid[col + 1][row]);\n  return neighbors.filter(neighbor => !neighbor.visited && !neighbor.wall);\n};\n\nexport const bfsShortestPath = endNode => {\n  const shortestPath = [];\n  let node = endNode;\n  while (node !== null) {\n    shortestPath.unshift(node);\n    node = node.prev;\n  }\n  return shortestPath;\n};\n","import React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport NodeObject from \"../utils/node\";\nimport { aStar, aStarShortestPath } from \"../utils/algorithms/astar\";\nimport { dijkstra, dijkstraShortestPath } from \"../utils/algorithms/dijkstra\";\nimport { depthFirstSearch } from \"../utils/algorithms/dfs\";\nimport { breadthFirstSearch, bfsShortestPath } from \"../utils/algorithms/bfs\";\nimport \"./PathFinder.css\";\n\nconst Visualizer = () => {\n  const [grid, setGrid] = useState([]);\n  const [finished, setFinished] = useState(false);\n  const [finding, setFinding] = useState(false);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [moveStart, setMoveStart] = useState(false);\n  const [moveEnd, setMoveEnd] = useState(false);\n  const [weighted, setWeighted] = useState(false);\n  const [algorithm, setAlgorithm] = useState(\"\");\n  const [coordinates, setCoordinates] = useState({\n    START_NODE_COL: 10,\n    START_NODE_ROW: 10,\n    END_NODE_COL: 30,\n    END_NODE_ROW: 10\n  });\n\n  useEffect(() => {\n    const grid = getInitialGrid();\n    setGrid(grid);\n  }, []);\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let col = 0; col < 40; col++) {\n      const curr = [];\n      for (let row = 0; row < 20; row++) {\n        curr.push(new NodeObject(col, row, coordinates));\n      }\n      grid.push(curr);\n    }\n    return grid;\n  };\n\n  const getWalledGrid = (col, row) => {\n    const newGrid = grid.slice();\n    const node = grid[col][row];\n    const newNode = {\n      ...node,\n      wall: !node.wall\n    };\n    newGrid[col][row] = newNode;\n    return newGrid;\n  };\n\n  const getNewNodeGrid = (col, row) => {\n    const newGrid = grid.slice();\n    const node = grid[col][row];\n    const newNode = {\n      ...node,\n      start: moveStart ? true : false,\n      end: moveEnd ? true : false\n    };\n    newGrid[col][row] = newNode;\n    return newGrid;\n  };\n\n  const getWeightedGrid = (col, row) => {\n    const newGrid = grid.slice();\n    const node = grid[col][row];\n    const newNode = {\n      ...node,\n      wall: false,\n      weight: node.weight === 0 ? 5 : 0\n    };\n    newGrid[col][row] = newNode;\n    return newGrid;\n  };\n\n  const toggleWeight = () => {\n    if (algorithm === \"dijkstra\" || algorithm === \"a*\") {\n      weighted ? setWeighted(false) : setWeighted(true);\n    }\n  };\n\n  const getPaths = (grid, startNode, endNode) => {\n    let visitedNodesInOrder = [];\n    let nodesInShortestPathOrder = [];\n    if (algorithm === \"dijkstra\") {\n      visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n      nodesInShortestPathOrder = dijkstraShortestPath(endNode);\n    }\n    if (algorithm === \"a*\") {\n      visitedNodesInOrder = aStar(grid, startNode, endNode);\n      nodesInShortestPathOrder = aStarShortestPath(endNode);\n    }\n    if (algorithm === \"dfs\") {\n      visitedNodesInOrder = depthFirstSearch(grid, startNode, endNode);\n      nodesInShortestPathOrder = visitedNodesInOrder;\n    }\n    if (algorithm === \"bfs\") {\n      visitedNodesInOrder = breadthFirstSearch(grid, startNode, endNode);\n      nodesInShortestPathOrder = bfsShortestPath(endNode);\n    }\n    return [visitedNodesInOrder, nodesInShortestPathOrder];\n  };\n\n  const changeAlgorithm = e => {\n    e.preventDefault();\n    setAlgorithm(e.target.id);\n    const newGrid = grid.slice();\n    if (e.target.id === \"dijkstra\" || e.target.id === \"a*\") {\n      newGrid.map(col =>\n        col.map(node => {\n          node.visited = false;\n          node.distance = 0;\n          node.seen = false;\n          node.prev = null;\n        })\n      );\n    } else {\n      newGrid.map(col =>\n        col.map(node => {\n          node.visited = false;\n          node.weight = 0;\n        })\n      );\n    }\n    setGrid(newGrid);\n  };\n\n  const resetGrid = () => {\n    if (!finished) return;\n    let visited = document.getElementsByClassName(\"node-visited\");\n    while (visited.length) {\n      visited[0].className = \"node\";\n    }\n    document.getElementById(\n      `${coordinates.START_NODE_ROW}-${coordinates.START_NODE_COL}`\n    ).className = \"node node-start\";\n    document.getElementById(\n      `${coordinates.END_NODE_ROW}-${coordinates.END_NODE_COL}`\n    ).className = \"node node-end\";\n    const newGrid = [];\n    for (let col = 0; col < 40; col++) {\n      const curr = [];\n      for (let row = 0; row < 20; row++) {\n        curr.push(new NodeObject(col, row, coordinates));\n      }\n      newGrid.push(curr);\n    }\n    setFinished(false);\n    setGrid(newGrid);\n  };\n\n  const animateAlgorithm = paths => {\n    const visitedNodesInOrder = paths[0];\n    const nodesInShortestPathOrder = paths[1];\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 20 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`${node.row}-${node.col}`).className +=\n          \" \" + \"node-visited\";\n      }, 20 * i);\n    }\n  };\n\n  const animateShortestPath = nodesInShortestPathOrder => {\n    const delay = algorithm === \"dfs\" ? 20 : 50;\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        if (i === nodesInShortestPathOrder.length - 1) {\n          setFinished(true);\n          setFinding(false);\n        }\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`${node.row}-${node.col}`).className +=\n          \" \" + \"node node-shortest-path\";\n      }, delay * i);\n    }\n  };\n\n  const visualizeAlgorithm = () => {\n    setFinding(true);\n    const {\n      START_NODE_ROW,\n      START_NODE_COL,\n      END_NODE_ROW,\n      END_NODE_COL\n    } = coordinates;\n    const startNode = grid[START_NODE_COL][START_NODE_ROW];\n    const endNode = grid[END_NODE_COL][END_NODE_ROW];\n    if (startNode.visited && endNode.visited) return;\n    const paths = getPaths(grid, startNode, endNode);\n    animateAlgorithm(paths);\n  };\n\n  const getAlgorithmName = () => {\n    if (algorithm === \"\") {\n      return \"Choose an Algorithm\";\n    }\n    if (algorithm === \"a*\") {\n      return \"A*\";\n    }\n    if (algorithm === \"dijkstra\") {\n      return \"Dijkstra's\";\n    }\n    if (algorithm === \"dfs\") {\n      return \"Depth First Search\";\n    }\n    if (algorithm === \"bfs\") {\n      return \"Breadth First Search\";\n    }\n  };\n\n  const getWeightButton = () => {\n    const style = {\n      display:\n        algorithm === \"dijkstra\"\n          ? \"initial\"\n          : algorithm === \"a*\"\n          ? \"initial\"\n          : \"none\",\n      background: weighted ? \"#e7f2f8\" : \"#74bdcb\",\n      color: weighted ? \"#74bdcb\" : \"#e7f2f8\"\n    };\n\n    return (\n      <button className=\"button\" style={style} onClick={() => toggleWeight()}>\n        Weighted Node\n      </button>\n    );\n  };\n\n  const getMainButton = () => {\n    let text;\n    let func;\n\n    const noAlgoAlert = () => {\n      alert(\"Choose an Algorithm!\");\n    };\n\n    if (algorithm === \"\") {\n      text = \"Choose an Algorithm!\";\n      func = noAlgoAlert;\n    } else if (finished || finding) {\n      text = \"Reset\";\n      func = resetGrid;\n    } else {\n      text = `Visualize ${getAlgorithmName()}`;\n      func = visualizeAlgorithm;\n    }\n\n    return (\n      <button className=\"button\" onClick={() => func()}>\n        {text}\n      </button>\n    );\n  };\n\n  const handleMouseDown = (col, row) => {\n    if (finding) {\n      return;\n    }\n    if (grid[col][row].start) {\n      setMoveStart(true);\n    } else if (grid[col][row].end) {\n      setMoveEnd(true);\n    } else if (weighted) {\n      const newGrid = getWeightedGrid(col, row);\n      setGrid(newGrid);\n    } else {\n      const newGrid = getWalledGrid(col, row);\n      setGrid(newGrid);\n    }\n    setMouseDown(true);\n  };\n\n  const handleMouseEnter = (col, row) => {\n    let newGrid;\n    let newCoordinates = Object.assign({}, coordinates);\n    if (!mouseDown) return;\n    if (!moveStart && !moveEnd) {\n      newGrid = getWalledGrid(col, row);\n    }\n    if (moveStart && !moveEnd) {\n      if (grid[col][row].end) return;\n      newGrid = getNewNodeGrid(col, row);\n      newCoordinates.START_NODE_COL = col;\n      newCoordinates.START_NODE_ROW = row;\n      setCoordinates(newCoordinates);\n    }\n    if (moveEnd && !moveStart) {\n      if (grid[col][row].start) return;\n      newGrid = getNewNodeGrid(col, row);\n      newCoordinates.END_NODE_COL = col;\n      newCoordinates.END_NODE_ROW = row;\n      setCoordinates(newCoordinates);\n    }\n    if (weighted) {\n      newGrid = getWeightedGrid(col, row);\n    }\n    setGrid(newGrid);\n  };\n\n  const handleMouseLeave = (col, row) => {\n    if (!mouseDown) return;\n    if (moveStart || moveEnd) {\n      if (\n        (moveStart && grid[col][row].end) ||\n        (moveEnd && grid[col][row].start)\n      ) {\n        return;\n      }\n      const newGrid = grid.slice();\n      const node = grid[col][row];\n      const newNode = {\n        ...node,\n        start: false,\n        end: false\n      };\n      newGrid[col][row] = newNode;\n      return newGrid;\n    }\n  };\n\n  const handleMouseUp = () => {\n    setMouseDown(false);\n    setMoveStart(false);\n    setMoveEnd(false);\n  };\n\n  const displayGrid = () => {\n    return grid.map((col, colIdx) => (\n      <div className=\"col\" key={colIdx}>\n        {col.map(node => {\n          const { row, col, end, start, wall, weight } = node;\n          return (\n            <Node\n              key={row}\n              row={row}\n              col={col}\n              start={start}\n              end={end}\n              wall={wall}\n              weight={weight}\n              mouseDown={mouseDown}\n              onMouseDown={(col, row) => handleMouseDown(col, row)}\n              onMouseEnter={(col, row) => handleMouseEnter(col, row)}\n              onMouseLeave={(col, row) => handleMouseLeave(col, row)}\n              onMouseUp={() => handleMouseUp()}\n            />\n          );\n        })}\n      </div>\n    ));\n  };\n\n  return (\n    <div>\n      <div className=\"navbar\">\n        <p className=\"logo\">Pathfindee</p>\n        <div className=\"buttons\">\n          <button className=\"dropdown\">\n            &#9660; Algorithms &#9660;\n            <div className=\"dropdown-content\">\n              <div id=\"a*\" defaultValue onClick={e => changeAlgorithm(e)}>\n                A* Algorithm\n              </div>\n              <div id=\"dijkstra\" defaultValue onClick={e => changeAlgorithm(e)}>\n                Dijkstra's Algorithm\n              </div>\n              <div id=\"dfs\" onClick={e => changeAlgorithm(e)}>\n                Depth First Search\n              </div>\n              <div id=\"bfs\" onClick={e => changeAlgorithm(e)}>\n                Breadth First Search\n              </div>\n            </div>\n          </button>\n          {getMainButton()}\n          {getWeightButton()}\n        </div>\n        <div className=\"legend\" style={{ display: \"flex\" }}>\n          <div style={{ color: \"black\" }}>&#9679;</div>\n          <label>weighted </label>\n          <div style={{ color: \"#81894e\" }}>&#9632;</div>\n          <label>start </label>\n          <div style={{ color: \"#de98ab\" }}>&#9632;</div>\n          <label>end</label>\n        </div>\n      </div>\n      <div className=\"grid\">{displayGrid()}</div>\n    </div>\n  );\n};\n\nexport default Visualizer;\n","export function depthFirstSearch(grid, startNode, endNode) {\n  const array = [startNode];\n  let visitedNodes;\n  const dfs = node => {\n    if (node.visited || node.wall) {\n      return;\n    }\n    if (node === endNode) {\n      visitedNodes = array.slice();\n    }\n    const col = node.col;\n    const row = node.row;\n    array.push(node);\n    node.visited = true;\n    if (row > 0) dfs(grid[col][row - 1]);\n    if (col < grid.length - 1) dfs(grid[col + 1][row]);\n    if (row < grid[0].length - 1) dfs(grid[col][row + 1]);\n    if (col > 0) dfs(grid[col - 1][row]);\n  };\n  dfs(startNode);\n  return visitedNodes;\n}\n","import React from \"react\";\nimport PathFinder from \"./components/PathFinder\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLinkedin, faGithubSquare } from \"@fortawesome/free-brands-svg-icons\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder />\n      <footer>\n        <a href=\"http://linkedin.com/in/johnsonphan95\">\n          <FontAwesomeIcon id=\"icon\" icon={faLinkedin}></FontAwesomeIcon>\n        </a>\n        <a href=\"http://github.com/johnsonphan95\">\n          <FontAwesomeIcon id=\"icon\" icon={faGithubSquare}></FontAwesomeIcon>\n        </a>\n        <div>\n          TO ADD WALLS OR WEIGHTED NODES JUST LEFT CLICK AND DRAG\n          <br />\n          <br />\n          TO MOVE THE START OR END NODE JUST LEFT CLICK AND MOVE\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}