{"version":3,"sources":["components/Node.jsx","utils/node.js","utils/algorithms/min_heap.js","utils/algorithms/dijkstra.js","components/PathFinder.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","row","col","start","end","wall","onMouseDown","onMouseEnter","onMouseUp","attributes","id","className","NodeObject","coordinates","this","visited","distance","Infinity","prev","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","seen","MinHeap","array","heap","buildHeap","currentIdx","Math","floor","length","siftDown","endIdx","leftChildIdx","rightChildIdx","idxToSwap","swap","parentIdx","valueToRemove","pop","value","push","siftUp","i","j","temp","getUnvisitedNeighbors","node","grid","neighbors","filter","neighbor","Visualizer","useState","setGrid","mouseDown","setMouseDown","moveStart","setMoveStart","moveEnd","useEffect","getInitialGrid","curr","getWalledGrid","newGrid","slice","newNode","animateShortestPath","nodesInShortestPathOrder","setTimeout","document","getElementById","visualizeDijkstra","startNode","finishNode","visitedNodesInOrder","animateDijkstra","endNode","visitedNodes","remove","forEach","insert","dijkstra","shortestPath","unshift","getNodesInShortestPathOrder","handleMouseDown","getNewNodeGrid","onClick","map","colIdx","key","handleMouseEnter","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bae05bc7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Node.css\";\n\nconst Node = ({\n  row,\n  col,\n  start,\n  end,\n  wall,\n  onMouseDown,\n  onMouseEnter,\n  onMouseUp\n}) => {\n  const attributes = end\n    ? \"node-end\"\n    : start\n    ? \"node-start\"\n    : wall\n    ? \"node-wall\"\n    : \"\";\n  return (\n    <div\n      id={`${row}-${col}`}\n      className={`node ${attributes}`}\n      onMouseDown={() => onMouseDown(col, row)}\n      onMouseEnter={() => onMouseEnter(col, row)}\n      onMouseUp={() => onMouseUp()}\n    ></div>\n  );\n};\n\nexport default Node;\n","class NodeObject {\n  constructor(col, row, coordinates) {\n    this.col = col;\n    this.row = row;\n    this.visited = false;\n    this.distance = Infinity;\n    this.prev = null;\n    this.start =\n      this.row === coordinates.START_NODE_ROW &&\n      this.col === coordinates.START_NODE_COL;\n    this.end =\n      this.row === coordinates.END_NODE_ROW &&\n      this.col === coordinates.END_NODE_COL;\n    this.wall = false;\n    this.seen = false;\n  }\n}\n\nexport default NodeObject;\n","class MinHeap {\n  constructor(array) {\n    this.heap = this.buildHeap(array);\n  }\n\n  buildHeap(array) {\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n      this.siftDown(currentIdx, array.length - 1, array);\n    }\n    return array;\n  }\n\n  siftDown(currentIdx, endIdx, heap) {\n    let leftChildIdx = currentIdx * 2 + 1;\n    while (leftChildIdx < endIdx) {\n      const rightChildIdx =\n        currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\n      let idxToSwap;\n      if (\n        rightChildIdx !== -1 &&\n        heap[rightChildIdx].distance < heap[leftChildIdx].distance\n      ) {\n        idxToSwap = rightChildIdx;\n      } else {\n        idxToSwap = leftChildIdx;\n      }\n      if (heap[idxToSwap].distance < heap[currentIdx].distance) {\n        this.swap(currentIdx, idxToSwap, heap);\n        currentIdx = idxToSwap;\n        leftChildIdx = currentIdx * 2 + 1;\n      } else {\n        return;\n      }\n    }\n  }\n\n  siftUp(currentIdx, heap) {\n    let parentIdx = Math.floor((currentIdx - 1) / 2);\n    while (\n      currentIdx > 0 &&\n      heap[currentIdx].distance < heap[parentIdx].distance\n    ) {\n      this.swap(currentIdx, parentIdx, heap);\n      currentIdx = parentIdx;\n      parentIdx = Math.floor((currentIdx - 1) / 2);\n    }\n  }\n\n  peek() {\n    return this.heap[0];\n  }\n\n  remove() {\n    this.swap(0, this.heap.length - 1, this.heap);\n    const valueToRemove = this.heap.pop();\n    this.siftDown(0, this.heap.length - 1, this.heap);\n    return valueToRemove;\n  }\n\n  insert(value) {\n    this.heap.push(value);\n    this.siftUp(this.heap.length - 1, this.heap);\n  }\n\n  swap(i, j, heap) {\n    let temp = heap[j];\n    heap[j] = heap[i];\n    heap[i] = temp;\n  }\n}\n\nexport default MinHeap;\n","import MinHeap from \"./min_heap\";\n\nexport const dijkstra = (grid, startNode, endNode) => {\n  const visitedNodes = [];\n  startNode.distance = 0;\n  const heap = new MinHeap([startNode]);\n  while (heap) {\n    const node = heap.remove();\n    if (!node || node.distance === Infinity) return visitedNodes;\n    node.visited = true;\n    visitedNodes.push(node);\n    if (node === endNode) return visitedNodes;\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    unvisitedNeighbors.forEach(neighbor => {\n      if (neighbor.seen || neighbor.wall) return;\n      neighbor.seen = true;\n      neighbor.distance = node.distance + 1;\n      neighbor.prev = node;\n      heap.insert(neighbor);\n    });\n  }\n  return visitedNodes;\n};\n\nconst getUnvisitedNeighbors = (node, grid) => {\n  const neighbors = [];\n  const { row, col } = node;\n  if (row > 0) neighbors.push(grid[col][row - 1]);\n  if (row < grid[0].length - 1) neighbors.push(grid[col][row + 1]);\n  if (col > 0) neighbors.push(grid[col - 1][row]);\n  if (col < grid.length - 1) neighbors.push(grid[col + 1][row]);\n  return neighbors.filter(neighbor => !neighbor.visited && !neighbor.wall);\n};\n\nexport const getNodesInShortestPathOrder = endNode => {\n  const shortestPath = [];\n  let node = endNode;\n  while (node !== null) {\n    shortestPath.unshift(node);\n    node = node.prev;\n  }\n  return shortestPath;\n};\n","import React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport NodeObject from \"../utils/node\";\nimport {\n  dijkstra,\n  getNodesInShortestPathOrder\n} from \"../utils/algorithms/dijkstra\";\n\nimport \"./PathFinder.css\";\n\nconst Visualizer = () => {\n  const [grid, setGrid] = useState([]);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [moveStart, setMoveStart] = useState(false);\n  const [moveEnd, setMoveEnd] = useState(false);\n  const [coordinates, setCoordinates] = useState({\n    START_NODE_COL: 5,\n    START_NODE_ROW: 10,\n    END_NODE_COL: 20,\n    END_NODE_ROW: 10\n  });\n\n  useEffect(() => {\n    const grid = getInitialGrid();\n    setGrid(grid);\n  }, []);\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let col = 0; col < 40; col++) {\n      const curr = [];\n      for (let row = 0; row < 20; row++) {\n        curr.push(new NodeObject(col, row, coordinates));\n      }\n      grid.push(curr);\n    }\n    return grid;\n  };\n\n  const getWalledGrid = (col, row) => {\n    const newGrid = grid.slice();\n    const node = grid[col][row];\n    const newNode = {\n      ...node,\n      wall: node.start || node.end ? false : !node.wall\n    };\n    newGrid[col][row] = newNode;\n    return newGrid;\n  };\n\n  const getNewNodeGrid = (col, row) => {\n    const newGrid = grid.slice();\n    const node = grid[col][row];\n    const newNode = {\n      ...node,\n      start: moveStart ? true : false,\n      end: moveEnd ? true : false\n    };\n    newGrid[col][row] = newNode;\n    return newGrid;\n  };\n\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  };\n\n  const animateShortestPath = nodesInShortestPathOrder => {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  };\n\n  const visualizeDijkstra = () => {\n    const {\n      START_NODE_ROW,\n      START_NODE_COL,\n      END_NODE_ROW,\n      END_NODE_COL\n    } = coordinates;\n    const startNode = grid[START_NODE_COL][START_NODE_ROW];\n    const finishNode = grid[END_NODE_COL][END_NODE_ROW];\n    if (startNode.visited && finishNode.visited) return;\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  };\n\n  const handleMouseDown = (col, row) => {\n    let newGrid;\n    if (moveStart && !moveEnd) {\n      newGrid = getNewNodeGrid(col, row);\n    } else {\n      newGrid = getWalledGrid(col, row);\n    }\n    setGrid(newGrid);\n    setMoveStart(false);\n    setMouseDown(true);\n  };\n\n  const handleMouseEnter = (col, row) => {\n    if (!mouseDown) return;\n    if (!moveStart && !moveEnd) {\n      const newGrid = getWalledGrid(col, row);\n      setGrid(newGrid);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setMouseDown(false);\n  };\n\n  const displayGrid = () => {\n    return grid.map((col, colIdx) => (\n      <div className=\"col\" key={colIdx}>\n        {col.map(node => {\n          const { row, col, end, start, wall } = node;\n          return (\n            <Node\n              key={row}\n              row={row}\n              col={col}\n              start={start}\n              end={end}\n              wall={wall}\n              mouseDown={mouseDown}\n              onMouseDown={(col, row) => handleMouseDown(col, row)}\n              onMouseEnter={(col, row) => handleMouseEnter(col, row)}\n              onMouseUp={() => handleMouseUp()}\n            />\n          );\n        })}\n      </div>\n    ));\n  };\n\n  return (\n    <div>\n      <div className=\"navbar\">\n        <button className=\"button\" onClick={() => visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <button className=\"button\">Start Node</button>\n        <button className=\"button\">End Node</button>\n      </div>\n      <div className=\"grid\">{displayGrid()}</div>\n    </div>\n  );\n};\n\nexport default Visualizer;\n","import React from \"react\";\nimport PathFinder from \"./components/PathFinder\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}